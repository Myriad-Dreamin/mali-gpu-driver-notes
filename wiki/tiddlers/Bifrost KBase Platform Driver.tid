created: 20200820180030533
modified: 20200820204155662
title: Bifrost KBase Platform Driver
type: text/x-markdown

#### io_resource

Resources are put in fixed order: I/O memory region, job IRQ, MMU IRQ, GPU IRQ.

在11.21版本中，如果你在`drivers/gpu/arm/midgard/platform/Kconfig`中添加的是`drivers/gpu/arm/midgard/platform/vexpress/Kconfig`，那么应用的配置如下：

+ register map: 映射到`0xFC010000`往后16KB大小的内存空间 (`0xFC010000`~`0xFC014000`)
+ job, mmu, gpu IRQ号分别为68, 69, 70

```c
static void kbasep_config_parse_io_resources(const struct kbase_io_resources *io_resources, struct resource *const linux_resources)
{
	...
	linux_resources[0].flags = IORESOURCE_MEM;
	...
	linux_resources[1].flags = IORESOURCE_IRQ | IORESOURCE_IRQ_HIGHLEVEL;
	...
	linux_resources[2].flags = IORESOURCE_IRQ | IORESOURCE_IRQ_HIGHLEVEL;
	...
	linux_resources[3].flags = IORESOURCE_IRQ | IORESOURCE_IRQ_HIGHLEVEL;
}
```

#### kbase_platform_driver.probe (kbase_platform_device_probe)

为`kbdev`分配`kbase_device`大小的内存，分配特征为`GFP_KERNEL`

使用`dev_set_drvdata`将`kbdev`附着到linux自带的`device`的上下文中，同时可以通过`dev_get_drvdata`重新获取`kbdev`指针。这个`device`来自于kbase的platform_device。

同时使用`kbase_device_init`初始化`kbdev`。

初始化函数分阶段存储在数组`dev_init`中，类型为`kbase_device_init[]`。

在11.21版本中，init列表如下，如有兴趣了解，请前往对应页面查看初始化过程：

```c
/**
 * struct kbase_device_init - Device init/term methods.
 * @init: Function pointer to a initialise method.
 * @term: Function pointer to a terminate method.
 * @err_mes: Error message to be printed when init method fails.
 */
struct kbase_device_init {
	kbase_device_init_method *init;
	kbase_device_term_method *term;
	char *err_mes;
};

static const struct kbase_device_init dev_init[] = {
#ifdef CONFIG_MALI_NO_MALI
	{kbase_gpu_device_create, kbase_gpu_device_destroy,
			"Dummy model initialization failed"},
#else
	{assign_irqs, NULL,
			"IRQ search failed"},
	{registers_map, registers_unmap,
			"Register map failed"},
#endif
	{kbase_device_io_history_init, kbase_device_io_history_term,
			"Register access history initialization failed"},
	{kbase_device_pm_init, kbase_device_pm_term,
			"Power management initialization failed"},
	{kbase_device_early_init, kbase_device_early_term,
			"Early device initialization failed"},
	{kbase_device_populate_max_freq, NULL,
			"Populating max frequency failed"},
	{kbase_device_misc_init, kbase_device_misc_term,
			"Miscellaneous device initialization failed"},
	{kbase_ctx_sched_init, kbase_ctx_sched_term,
			"Context scheduler initialization failed"},
	{kbase_mem_init, kbase_mem_term,
			"Memory subsystem initialization failed"},
	{kbase_device_coherency_init, NULL,
			"Device coherency init failed"},
	{kbase_protected_mode_init, kbase_protected_mode_term,
			"Protected mode subsystem initialization failed"},
	{kbase_device_list_init, kbase_device_list_term,
			"Device list setup failed"},
	{kbasep_js_devdata_init, kbasep_js_devdata_term,
			"Job JS devdata initialization failed"},
	{kbase_device_timeline_init, kbase_device_timeline_term,
			"Timeline stream initialization failed"},
	{kbase_device_hwcnt_backend_gpu_init,
			kbase_device_hwcnt_backend_gpu_term,
			"GPU hwcnt backend creation failed"},
	{kbase_device_hwcnt_context_init, kbase_device_hwcnt_context_term,
			"GPU hwcnt context initialization failed"},
	{kbase_device_hwcnt_virtualizer_init,
			kbase_device_hwcnt_virtualizer_term,
			"GPU hwcnt virtualizer initialization failed"},
	{kbase_device_vinstr_init, kbase_device_vinstr_term,
			"Virtual instrumentation initialization failed"},
	{kbase_backend_late_init, kbase_backend_late_term,
			"Late backend initialization failed"},
#ifdef MALI_KBASE_BUILD
	{kbase_debug_job_fault_dev_init, kbase_debug_job_fault_dev_term,
			"Job fault debug initialization failed"},
	{kbase_device_debugfs_init, kbase_device_debugfs_term,
			"DebugFS initialization failed"},
	/* Sysfs init needs to happen before registering the device with
	 * misc_register(), otherwise it causes a race condition between
	 * registering the device and a uevent event being generated for
	 * userspace, causing udev rules to run which might expect certain
	 * sysfs attributes present. As a result of the race condition
	 * we avoid, some Mali sysfs entries may have appeared to udev
	 * to not exist.
	 * For more information, see
	 * https://www.kernel.org/doc/Documentation/driver-model/device.txt, the
	 * paragraph that starts with "Word of warning", currently the
	 * second-last paragraph.
	 */
	{kbase_sysfs_init, kbase_sysfs_term, "SysFS group creation failed"},
	{kbase_device_misc_register, kbase_device_misc_deregister,
			"Misc device registration failed"},
#ifdef CONFIG_MALI_BUSLOG
	{buslog_init, buslog_term, "Bus log client registration failed"},
#endif
	{kbase_gpuprops_populate_user_buffer, kbase_gpuprops_free_user_buffer,
			"GPU property population failed"},
#endif
	{kbase_dummy_job_wa_load, kbase_dummy_job_wa_cleanup,
			"Dummy job workaround load failed"},
};
```

#### kbase_platform_driver.remove (kbase_platform_device_remove)


#### kbase_platform_driver.pm.suspend (kbase_device_suspend)


#### kbase_platform_driver.pm.resume (kbase_device_resume)


#### kbase_platform_driver.pm.runtime_suspend (kbase_device_runtime_suspend)


#### kbase_platform_driver.pm.runtime_resume (kbase_device_runtime_resume)


#### kbase_platform_driver.pm.runtime_idle (kbase_device_runtime_idle)

